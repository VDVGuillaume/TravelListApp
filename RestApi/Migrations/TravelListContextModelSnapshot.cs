// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TravelListRepository.Sql;

namespace TravelList.Api.Migrations
{
    [DbContext(typeof(TravelListContext))]
    partial class TravelListContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TravelListModels.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("UserId");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("TravelListModels.TravelCheckListItem", b =>
                {
                    b.Property<int>("TravelCheckListItemID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<string>("Category");

                    b.Property<bool>("Checked");

                    b.Property<string>("Name");

                    b.Property<int>("TravelListItemID");

                    b.HasKey("TravelCheckListItemID");

                    b.HasIndex("TravelListItemID");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("TravelListModels.TravelListItem", b =>
                {
                    b.Property<int>("TravelListItemID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Country")
                        .IsRequired();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<DateTime>("EndDate");

                    b.Property<decimal>("Latitude");

                    b.Property<decimal>("Longitude");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("TravelListItemID");

                    b.ToTable("TravelLists");
                });

            modelBuilder.Entity("TravelListModels.TravelListItemImage", b =>
                {
                    b.Property<int>("TravelListItemImageID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("ImageData")
                        .IsRequired();

                    b.Property<string>("ImageName")
                        .IsRequired();

                    b.Property<int>("TravelListItemID");

                    b.HasKey("TravelListItemImageID");

                    b.HasIndex("TravelListItemID");

                    b.ToTable("TravelListImages");
                });

            modelBuilder.Entity("TravelListModels.TravelPointOfInterest", b =>
                {
                    b.Property<int>("TravelPointOfInterestID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Latitude");

                    b.Property<decimal>("Longitude");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("TravelListItemID");

                    b.HasKey("TravelPointOfInterestID");

                    b.HasIndex("TravelListItemID");

                    b.ToTable("Points");
                });

            modelBuilder.Entity("TravelListModels.TravelRoute", b =>
                {
                    b.Property<int>("TravelRouteID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Driving");

                    b.Property<int?>("EndTravelPointOfInterestID");

                    b.Property<int?>("StartTravelPointOfInterestID");

                    b.Property<int>("TravelListItemID");

                    b.HasKey("TravelRouteID");

                    b.HasIndex("EndTravelPointOfInterestID");

                    b.HasIndex("StartTravelPointOfInterestID");

                    b.HasIndex("TravelListItemID");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("TravelListModels.TravelTaskListItem", b =>
                {
                    b.Property<int>("TravelTaskListItemID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Checked");

                    b.Property<string>("Name");

                    b.Property<int>("TravelListItemID");

                    b.HasKey("TravelTaskListItemID");

                    b.HasIndex("TravelListItemID");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("TravelListModels.TravelCheckListItem", b =>
                {
                    b.HasOne("TravelListModels.TravelListItem")
                        .WithMany("Items")
                        .HasForeignKey("TravelListItemID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TravelListModels.TravelListItemImage", b =>
                {
                    b.HasOne("TravelListModels.TravelListItem")
                        .WithMany("Images")
                        .HasForeignKey("TravelListItemID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TravelListModels.TravelPointOfInterest", b =>
                {
                    b.HasOne("TravelListModels.TravelListItem")
                        .WithMany("Points")
                        .HasForeignKey("TravelListItemID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TravelListModels.TravelRoute", b =>
                {
                    b.HasOne("TravelListModels.TravelPointOfInterest")
                        .WithMany("ConnectedEndRoutes")
                        .HasForeignKey("EndTravelPointOfInterestID");

                    b.HasOne("TravelListModels.TravelPointOfInterest")
                        .WithMany("ConnectedStartRoutes")
                        .HasForeignKey("StartTravelPointOfInterestID");

                    b.HasOne("TravelListModels.TravelListItem")
                        .WithMany("Routes")
                        .HasForeignKey("TravelListItemID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TravelListModels.TravelTaskListItem", b =>
                {
                    b.HasOne("TravelListModels.TravelListItem")
                        .WithMany("Tasks")
                        .HasForeignKey("TravelListItemID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
